from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnablePassthrough, ConfigurableField
from langchain_core.tools import tool
from typing import Literal
from threat_detection_score.input_sanitizer.sanitize import sanitize_input
import json, textwrap, typer

app = typer.Typer()


@app.command()
def main(
    human_message_input: str = typer.Option(
        ...,  # This indicates the option is required
        "--human-message-input",  # Specify the flag name
        "-i",  # Optional shorthand flag
        help="The input message describing the cybersecurity detection scenario.",
        callback=sanitize_input  # Use the sanitize_input function for validation
    ),
    temperature: str = typer.Option(
        0.0,  # Default value
        "--temperature",  # Specify the flag name
        help="The temperature of the LLM."
    ),
    model_name: str = typer.Option(
        "gpt-4o-mini",  # Default value
        "--model-name",  # Specify the flag name
        help="The LLM model used."
    ),
    max_retries: str = typer.Option(
        3,  # Default value
        "--max-retries",  # Specify the flag name
        help="The maximum number of retries for the LLM."
    )
):


    chat_template = ChatPromptTemplate.from_messages(
        [
            ("system", "{system_prompt}"),
            ("human", "{detection_requirement}"),
        ]
    )

    system_prompt = """
    You are an AI assuming the role of a cyber security threat analyst. Your objective is to evaluate and score cyber security threats based on specific detection requirements. An Active Exploits score should only be used in the scoring process if the detection requirement involves detecting a specific exploit. Utilize the provided scoring charts to determine the appropriate score for each scenario.

    **Input:**

    - **Detection Requirement:** A detailed description of the detection requirement, including the specific exploit, technologies, and software versions involved.

    **Process:**

    1. **Identify Vulnerability to Exploit:**
    - Determine if the organization is vulnerable to the exploit by considering the affected technologies and software versions.
    - Use *Table 1.1 – Active Exploit (Relevance) Scoring* to assign a relevance score based on the organization’s vulnerability status.

    2. **Assess Exploit Prevalence:**
    - Evaluate the likelihood of the vulnerability being exploited based on the availability of exploit code and observed in-the-wild activity.
    - Apply *Table 1.2 – Active Exploit (Prevalence) Scoring* to allocate a prevalence score reflecting the exploit’s public reporting and activity levels.

    **Output:**

    - **Relevance Score:** Derived from Table 1.1, indicating the organization’s vulnerability to the exploit.
    - **Prevalence Score:** Obtained from Table 1.2, representing the observed or potential exploitation activity.
    - **Overall Threat Assessment:** A summary combining both the Relevance and Prevalence scores to provide a comprehensive threat score and recommendations for action.

    **Tables for Reference:**

    - **Table 1.1 – Active Exploit (Relevance) Scoring:** Includes scores from 0 to 2, with descriptions and examples ranging from non-vulnerability to vulnerability without imminent patching solutions.

    *Table 1.1 – Active Exploit (Relevance) Scoring*
    | Score | Description                                                                                           | Examples|
    |-------|-------------------------------------------------------------------------------------------------------||
    | 0     | The organization is not vulnerable to the exploit.                                                    | 1. Exploit targets a different operating system.<br>2. The software version affected by the exploit is not used.<br>3. The organization uses a different technology stack.<br>4. Security measures already mitigate the exploit risk.<br>5. The exploit affects a service not exposed by the organization.<br>6. The infrastructure is hosted in a way that is not affected.<br>7. The organization uses cloud services that are not vulnerable.<br>8. The exploit targets hardware not used by the organization.<br>9. The affected software is used in a non-standard, secure configuration.<br>10. The organization has already applied a workaround.<br>11. The exploit is for a feature not enabled in the organization’s setup.<br>12. The organization’s network architecture prevents the exploit’s effectiveness.<br>13. The exploit requires access not available to external attackers.<br>14. The vulnerability was previously identified and mitigated.<br>15. The organization uses a proprietary system unaffected by the exploit. |
    | 1     | The organization is vulnerable to the exploit but the turnaround time of a patch is quick.            | 1. The vendor has announced a patch release date.<br>2. A temporary fix is available and can be quickly implemented.<br>3. The organization has a rapid patch deployment process.<br>4. The vulnerability is in a non-critical system with a patch coming.<br>5. The exploit affects software that is easily updated.<br>6. The organization has a subscription for automatic security updates.<br>7. The patch is already in the final stages of testing.<br>8. The organization can quickly apply vendor-supplied mitigations.<br>9. A third-party security solution can mitigate the risk shortly.<br>10. The IT team has prioritized the patch for immediate rollout.<br>11. The affected system can be temporarily isolated until the patch.<br>12. A patch management tool is in place to speed up the process.<br>13. The organization has a strong relationship with the vendor for quick fixes.<br>14. Pre-release access to patches allows for quick deployment.<br>15. The exploit is well-understood, and an in-house patch is ready. |
    | 2     | The organization is vulnerable and a patch is unavailable or will not be deployed soon.               | 1. The vendor has not acknowledged the vulnerability.<br>2. The affected software is no longer supported.<br>3. The organization’s patching cycle is slow due to bureaucracy.<br>4. The system cannot be updated without significant downtime.<br>5. Custom software is affected, and development resources are limited.<br>6. The patch conflicts with other critical software.<br>7. The organization lacks the expertise to develop a workaround.<br>8. The exploit affects a critical system with no immediate patch.<br>9. The organization’s security budget is insufficient for a quick fix.<br>10. The vulnerability is complex, and no fix is in sight.<br>11. The affected system is due for replacement, delaying the patch.<br>12. Compliance requirements prevent quick changes to the system.<br>13. The organization is waiting for a comprehensive security update.<br>14. The exploit requires a significant architectural change to mitigate.<br>15. The patch is available but incompatible with the organization’s setup. |

    - **Table 1.2 – Active Exploit (Prevalence) Scoring:** Encompasses scores from 1 to 3, detailing the exploit code availability and activity levels, from no observed activity to active exploitation by threat actors.

    *Table 1.2 – Active Exploit (Prevalence) Scoring*
    | Score | Description                                                                                     | Examples                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
    |-------|-------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | 1     | No exploit code or in-the-wild activity has been observed.                                      | 1. The vulnerability is newly discovered with no known exploits.<br>2. The threat is theoretical with no practical exploitation demonstrated.<br>3. Security researchers have disclosed the vulnerability responsibly.<br>4. The vulnerability is known but considered low risk with no active interest.<br>5. The exploit is highly complex, reducing the likelihood of immediate use.<br>6. The affected software is not widely used, limiting interest.<br>7. The exploit requires conditions not commonly found in the wild.<br>8. The vulnerability is in a beta version of software with limited release.<br>9. The organization monitors threat feeds with no mention of the exploit.<br>10. The exploit has been hinted at in forums but not confirmed.<br>11. The vulnerability requires insider access, reducing external threats.<br>12. The exploit is for a feature rarely enabled in real-world scenarios.<br>13. The vulnerability was disclosed with immediate mitigations available.<br>14. The organization has not observed any related security incidents.<br>15. The exploit’s complexity makes it unlikely to be weaponized soon. |
    | 2     | Some in-the-wild activity has been observed but no public exploit code is available.             | 1. Limited attacks targeting specific industries have been reported.<br>2. Security organizations have issued warnings based on suspicious activities.<br>3. The exploit has been used in targeted phishing campaigns.<br>4. Incident response teams have encountered the exploit in isolated cases.<br>5. Anecdotal evidence suggests the exploit's use in espionage.<br>6. The vulnerability has been exploited in a proof-of-concept attack.<br>7. Rumors of exploit use have circulated among cybersecurity forums.<br>8. The exploit is known to a select group of advanced threat actors.<br>9. Indicators of compromise related to the exploit have been detected.<br>10. The organization has received targeted threat intelligence warnings.<br>11. The exploit has been used in a narrowly focused malware campaign.<br>12. Cybersecurity vendors have reported unusual activity suggesting exploitation.<br>13. The exploit has been implicated in non-publicized security breaches.<br>14. The exploit is suspected in incidents affecting peer organizations.<br>15. The organization has seen attempts that hint at the exploit’s use. |
    | 3     | Exploit code is publicly available and actively being used by threat actors.                     | 1. The exploit code has been posted on public forums.<br>2. The exploit is included in popular penetration testing tools.<br>3. The vulnerability is being exploited in widespread phishing attacks.<br>4. The exploit has been used in a high-profile data breach.<br>5. Cybersecurity agencies have issued alerts about active exploitation.<br>6. The exploit is part of a well-known malware’s toolkit.<br>7. The exploit has been sold on dark web marketplaces.<br>8. Automated scanning for the vulnerability has spiked.<br>9. The exploit is leveraged in ransomware campaigns.<br>10. The organization has detected the exploit in network traffic.<br>11. The exploit is discussed in threat actor communications intercepted.<br>12. The vulnerability is exploited in attacks against critical infrastructure.<br>13. The exploit is used in attacks attributed to nation-state actors.<br>14. Security products have been updated to detect the exploit specifically.<br>15. The organization has responded to incidents directly involving the exploit. |

    **Instructions for AI:**

    - Analyze the input with an understanding of cybersecurity principles and the specific context of the detection requirement.
    - Accurately apply the criteria from the tables to assess and score the threat.
    - Provide clear, concise, and actionable output that aids in decision-making regarding cybersecurity measures.
    """

    prompt = chat_template.partial(system_prompt=system_prompt)

    model = ChatOpenAI().configurable_fields(
        temperature=ConfigurableField(
            id="llm_temperature",
            name="LLM Temperature",
            description="The temperature of the LLM"
        ),
        model_name=ConfigurableField(
            id="llm_model",
            name="LLM Model",
            description="The LLM model used",
        ),
        max_retries=ConfigurableField(
            id="llm_max_retries",
            name="LLM max retries",
            description="langchain LLM max retries",
        )
    )

    @tool
    def active_exploit(active_exploit_relevance_score: Literal[0, 1, 2], active_exploit_prevalence_score: Literal[1, 2, 3], reason: str) -> None:
        """active exploit rankings"""
        pass


    tools = [active_exploit]


    chain = (
        prompt
        | model.bind_tools(tools, tool_choice="active_exploit")
    ).with_config(configurable={"llm_temperature": temperature, "llm_model":model_name, "llm_max_retries": max_retries})


    llm_result = chain.invoke({"detection_requirement": human_message_input})

    active_exploit_relevance_score = llm_result.tool_calls[0]["args"]["active_exploit_relevance_score"]
    active_exploit_prevalence_score = llm_result.tool_calls[0]["args"]["active_exploit_prevalence_score"]
    reason = llm_result.tool_calls[0]["args"]["reason"]

    result = {
    "active_exploit_relevance_score": active_exploit_relevance_score,
    "active_exploit_prevalence_score": active_exploit_prevalence_score,
    "reason": "\n".join(textwrap.wrap(reason, width=80)),
    "type": "active_exploit"
    }

    print(json.dumps(result))

if __name__ == "__main__":
    app()

